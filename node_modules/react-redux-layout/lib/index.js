'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var getWindowSize = function getWindowSize() {
  return {
    // body.clientWidth seems to not include the scrollbar width, but we fallback
    // window.innerWidth in environments where body isn't available (e.g jsdom)
    width: document.body.clientWidth || window.innerWidth,
    height: window.innerHeight
  };
};

var ACTION_ID = '@@layout/RESIZE';

var _store = void 0;
var _computeLayout = void 0;

// Didn't named the export as just "reducer" because the user will probably
// already have a "reducer" import or variable name in the consuming namespace
var layoutReducer = exports.layoutReducer = function layoutReducer(state, action) {
  // Ignore Redux init. Layout needs state instance to init, so it's impossible
  // to register the computeLayout fn before the Redux store init.
  if (typeof _computeLayout !== 'function') {
    return {};
  }

  if (action.type === ACTION_ID) {
    return _computeLayout(getWindowSize());
  }

  return state;
};

var handleResize = function handleResize() {
  _store.dispatch({
    type: ACTION_ID
  });
};

exports.default = function (_ref) {
  var store = _ref.store,
      computeLayout = _ref.computeLayout;

  _store = store;
  _computeLayout = computeLayout;
  window.addEventListener('resize', handleResize);

  // Init layout data
  handleResize();

  return function () {
    _store = _computeLayout = undefined;
    window.removeEventListener('resize', handleResize);
  };
};